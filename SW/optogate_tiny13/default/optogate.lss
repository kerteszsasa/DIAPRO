
optogate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000032a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  000003c0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000131  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  00000511  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000215  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000606  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b1  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ef  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	a8 c0       	rjmp	.+336    	; 0x156 <__vector_2>
   6:	5c c0       	rjmp	.+184    	; 0xc0 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	46 c0       	rjmp	.+140    	; 0x98 <__vector_5>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	4e c0       	rjmp	.+156    	; 0xac <__vector_7>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea e2       	ldi	r30, 0x2A	; 42
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0

0000002c <.do_copy_data_start>:
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <.do_copy_data_loop>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 36       	cpi	r26, 0x65	; 101
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	ad d0       	rcall	.+346    	; 0x19e <main>
  44:	70 c1       	rjmp	.+736    	; 0x326 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <initTimr3>:
volatile char state = 1;
volatile char muted = 0;


void initTimr3(){
	TCCR0A = (1<<WGM01 ) | (1<<WGM00 ); // Fast PWM
  48:	83 e0       	ldi	r24, 0x03	; 3
  4a:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (1<<WGM02 ) | (1<<CS00 );	// Fast PWM, no prescaler
  4c:	89 e0       	ldi	r24, 0x09	; 9
  4e:	83 bf       	out	0x33, r24	; 51
	OCR0A = 118; 						// comapre register A: top of counter : 118 for 19.5kHz sine out @ 4.8Mhz clk
  50:	86 e7       	ldi	r24, 0x76	; 118
  52:	86 bf       	out	0x36, r24	; 54
	TIMSK0 = (1<<OCIE0A);				// compare A ineterrupt enable
  54:	84 e0       	ldi	r24, 0x04	; 4
  56:	89 bf       	out	0x39, r24	; 57
}
  58:	08 95       	ret

0000005a <initTimr>:

void initTimr(){	//PB0 a kimenet, 4,8MHz kvarc mellett 19.6 kHz kimenõ jel
	TCCR0A =   (1<<WGM00 )|(1<< COM0A0)  ; //  PWM , OC0A toggle
  5a:	81 e4       	ldi	r24, 0x41	; 65
  5c:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (1<<WGM02 ) | (1<<CS00 );	//  PWM, no prescaler
  5e:	89 e0       	ldi	r24, 0x09	; 9
  60:	83 bf       	out	0x33, r24	; 51
	OCR0A = 59; 					// comapre register A: top of counter : 118 for 19.5kHz sine out @ 4.8Mhz clk
  62:	8b e3       	ldi	r24, 0x3B	; 59
  64:	86 bf       	out	0x36, r24	; 54
//	TIMSK0 = (1<<OCIE0A);				// compare A ineterrupt enable
}
  66:	08 95       	ret

00000068 <initTimr2>:
void initTimr2(){	//PB1 a kimenet, 4,8MHz kvarc mellett 19.6 kHz kimenõ jel
	TCCR0A =   (0<<WGM00 )| (0<<WGM01 )|(1<< COM0B0)|(0<< COM0B1)|(0<< COM0A0)|(0<< COM0A1)  ; //  PWM , OC0A toggle
  68:	80 e1       	ldi	r24, 0x10	; 16
  6a:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (0<<WGM02 ) | (0<<CS00 );	//  PWM, no prescaler, init value is OFF timer
  6c:	13 be       	out	0x33, r1	; 51
	OCR0B = 98; 					// comapre register A: top of counter : 118 for 19.5kHz sine out @ 4.8Mhz clk
  6e:	82 e6       	ldi	r24, 0x62	; 98
  70:	89 bd       	out	0x29, r24	; 41
	TIMSK0 = (1<<OCIE0B);				// compare A ineterrupt enable
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	89 bf       	out	0x39, r24	; 57
}
  76:	08 95       	ret

00000078 <signal_on>:

void signal_on(){
//	TCCR0B = (0<<WGM02 ) | (1<<CS00 );// for 2
TCCR0B = (1<<WGM02 ) | (1<<CS00 ); // for 1
  78:	89 e0       	ldi	r24, 0x09	; 9
  7a:	83 bf       	out	0x33, r24	; 51

ledon();
  7c:	c3 9a       	sbi	0x18, 3	; 24
}
  7e:	08 95       	ret

00000080 <signal_off>:

void signal_off(){
//	TCCR0B = (0<<WGM02 );// for 2
TCCR0B = (1<<WGM02 ) | (0<<CS00 ); // for 1
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	83 bf       	out	0x33, r24	; 51

ledoff();
  84:	c3 98       	cbi	0x18, 3	; 24

}
  86:	08 95       	ret

00000088 <initComparator>:

void initComparator(){
	ADCSRB = (1<<ACME); 	// ADC off
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	83 b9       	out	0x03, r24	; 3
	ADMUX = (1<<MUX1) | (0<<MUX0);// AIN1 is the negative input
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	87 b9       	out	0x07, r24	; 7
	ACSR |= 1<<ACIE;		// interrupt enable
  90:	43 9a       	sbi	0x08, 3	; 8

	DIDR0= (1<<AIN0D );		// disable digital
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	84 bb       	out	0x14, r24	; 20
}
  96:	08 95       	ret

00000098 <__vector_5>:

ISR (ANA_COMP_vect){
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
//	sine_enable= 255;
//	ledon();
//_delay_ms(1000);
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_7>:


ISR (TIM0_COMPB_vect ){	//HACK to get OC0B pwm out: //OC0B csak FF értékére vált állapotot, de nekem hamarabb kell, compare match esetén átállítom a timert, hogy váltson :)
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
//TCNT0 =255;

}
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_3>:


ISR (TIM0_OVF_vect  ){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
//TCNT0 =255-59;
//ledon();
}
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <Mute_on>:


}*/

void Mute_on(void){
	muted=1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 64 00 	sts	0x0064, r24
	DDRB|= 2;
  da:	b9 9a       	sbi	0x17, 1	; 23
	PORTB|=2;
  dc:	c1 9a       	sbi	0x18, 1	; 24
}
  de:	08 95       	ret

000000e0 <Mute_off>:

void Mute_off(void){
	muted=0;
  e0:	10 92 64 00 	sts	0x0064, r1
	/**/
	PORTB&=!2;
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	18 ba       	out	0x18, r1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	80 eb       	ldi	r24, 0xB0	; 176
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <Mute_off+0xc>
	_delay_ms(1);
	/**/
	PORTB&=!2;
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	18 ba       	out	0x18, r1	; 24
	DDRB= 8 |4|1;
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	87 bb       	out	0x17, r24	; 23
	
}
  f8:	08 95       	ret

000000fa <Blink>:
void Set_state(uint8_t data){
	eeprom_write_byte ((uint8_t*) 1, data); 
}


void Blink(char num){
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
	for (int i=0; i<num; i++){
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	60 ea       	ldi	r22, 0xA0	; 160
 102:	7c e8       	ldi	r23, 0x8C	; 140
 104:	a8 e7       	ldi	r26, 0x78	; 120
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	19 c0       	rjmp	.+50     	; 0x13c <Blink+0x42>
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
		for(int j=0; j<5; j++){
			ledon();
 10e:	c3 9a       	sbi	0x18, 3	; 24
 110:	fb 01       	movw	r30, r22
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <Blink+0x18>
			_delay_ms(30);
			ledoff();
 116:	c3 98       	cbi	0x18, 3	; 24
 118:	fb 01       	movw	r30, r22
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <Blink+0x20>
}


void Blink(char num){
	for (int i=0; i<num; i++){
		for(int j=0; j<5; j++){
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	25 30       	cpi	r18, 0x05	; 5
 124:	31 05       	cpc	r19, r1
 126:	99 f7       	brne	.-26     	; 0x10e <Blink+0x14>
 128:	28 e8       	ldi	r18, 0x88	; 136
 12a:	33 e1       	ldi	r19, 0x13	; 19
 12c:	fd 01       	movw	r30, r26
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <Blink+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 132:	21 50       	subi	r18, 0x01	; 1
 134:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 136:	d1 f7       	brne	.-12     	; 0x12c <Blink+0x32>
	eeprom_write_byte ((uint8_t*) 1, data); 
}


void Blink(char num){
	for (int i=0; i<num; i++){
 138:	4f 5f       	subi	r20, 0xFF	; 255
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
 13c:	48 17       	cp	r20, r24
 13e:	59 07       	cpc	r21, r25
 140:	24 f3       	brlt	.-56     	; 0x10a <Blink+0x10>
 142:	88 e8       	ldi	r24, 0x88	; 136
 144:	93 e1       	ldi	r25, 0x13	; 19
 146:	28 e7       	ldi	r18, 0x78	; 120
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <Blink+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 152:	d9 f7       	brne	.-10     	; 0x14a <Blink+0x50>
			_delay_ms(30);
			}
		_delay_ms(500);
		}
	_delay_ms(500);
}
 154:	08 95       	ret

00000156 <__vector_2>:




ISR (PCINT0_vect ){
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
if(sine_enable<10)
 162:	80 91 62 00 	lds	r24, 0x0062
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	28 f4       	brcc	.+10     	; 0x174 <__vector_2+0x1e>
	sine_enable+=2;
 16a:	80 91 62 00 	lds	r24, 0x0062
 16e:	8e 5f       	subi	r24, 0xFE	; 254
 170:	80 93 62 00 	sts	0x0062, r24
//sine_enable=1;
//signal_on();
//_delay_ms(1000);

}
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <initExtint>:

void initExtint(){
	PCMSK=(1<<PCINT4 ); // pcint4 on pb4 enable
 180:	80 e1       	ldi	r24, 0x10	; 16
 182:	85 bb       	out	0x15, r24	; 21
	GIFR = (1<<PCIF);	//enable pin change int
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	8a bf       	out	0x3a, r24	; 58
	GIMSK =(1<<PCIE);	//PCint int en
 188:	8b bf       	out	0x3b, r24	; 59
}
 18a:	08 95       	ret

0000018c <Set_state>:
uint8_t Get_state(void){
	uint8_t  byteRead = eeprom_read_byte((uint8_t*)1); 
	return byteRead;
}

void Set_state(uint8_t data){
 18c:	68 2f       	mov	r22, r24
	eeprom_write_byte ((uint8_t*) 1, data); 
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	bb d0       	rcall	.+374    	; 0x30a <__eewr_byte_tn13a>
}
 194:	08 95       	ret

00000196 <Get_state>:




uint8_t Get_state(void){
	uint8_t  byteRead = eeprom_read_byte((uint8_t*)1); 
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	af d0       	rcall	.+350    	; 0x2fa <__eerd_byte_tn13a>
	return byteRead;
}
 19c:	08 95       	ret

0000019e <main>:
	PCMSK=(1<<PCINT4 ); // pcint4 on pb4 enable
	GIFR = (1<<PCIF);	//enable pin change int
	GIMSK =(1<<PCIE);	//PCint int en
}

int main(){
 19e:	bf 92       	push	r11
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29




DDRB= 8 |4|1;
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	87 bb       	out	0x17, r24	; 23
	OCR0A = 118; 						// comapre register A: top of counter : 118 for 19.5kHz sine out @ 4.8Mhz clk
	TIMSK0 = (1<<OCIE0A);				// compare A ineterrupt enable
}

void initTimr(){	//PB0 a kimenet, 4,8MHz kvarc mellett 19.6 kHz kimenõ jel
	TCCR0A =   (1<<WGM00 )|(1<< COM0A0)  ; //  PWM , OC0A toggle
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (1<<WGM02 ) | (1<<CS00 );	//  PWM, no prescaler
 1b8:	89 e0       	ldi	r24, 0x09	; 9
 1ba:	83 bf       	out	0x33, r24	; 51
	OCR0A = 59; 					// comapre register A: top of counter : 118 for 19.5kHz sine out @ 4.8Mhz clk
 1bc:	8b e3       	ldi	r24, 0x3B	; 59
 1be:	86 bf       	out	0x36, r24	; 54
//_delay_ms(1000);

}

void initExtint(){
	PCMSK=(1<<PCINT4 ); // pcint4 on pb4 enable
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	85 bb       	out	0x15, r24	; 21
	GIFR = (1<<PCIF);	//enable pin change int
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	8a bf       	out	0x3a, r24	; 58
	GIMSK =(1<<PCIE);	//PCint int en
 1c8:	8b bf       	out	0x3b, r24	; 59
DDRB= 8 |4|1;
initTimr();
initExtint();
//initTimr2();
//initComparator();
sei();
 1ca:	78 94       	sei
sine_enable=1;
 1cc:	11 e0       	ldi	r17, 0x01	; 1
 1ce:	10 93 62 00 	sts	0x0062, r17




uint8_t Get_state(void){
	uint8_t  byteRead = eeprom_read_byte((uint8_t*)1); 
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	91 d0       	rcall	.+290    	; 0x2fa <__eerd_byte_tn13a>
//initComparator();
sei();
sine_enable=1;


state= Get_state();
 1d8:	80 93 60 00 	sts	0x0060, r24
if(state==0)
 1dc:	80 91 60 00 	lds	r24, 0x0060
 1e0:	88 23       	and	r24, r24
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <main+0x4a>
	state=1;
 1e4:	10 93 60 00 	sts	0x0060, r17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e8:	20 e1       	ldi	r18, 0x10	; 16
 1ea:	b2 2e       	mov	r11, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ec:	08 e7       	ldi	r16, 0x78	; 120
 1ee:	10 e0       	ldi	r17, 0x00	; 0


}*/

void Mute_on(void){
	muted=1;
 1f0:	cc 24       	eor	r12, r12
 1f2:	c3 94       	inc	r12
 1f4:	c0 eb       	ldi	r28, 0xB0	; 176
 1f6:	d4 e0       	ldi	r29, 0x04	; 4
	/**/
	PORTB&=!2;
	_delay_ms(1);
	/**/
	PORTB&=!2;
	DDRB= 8 |4|1;
 1f8:	9d e0       	ldi	r25, 0x0D	; 13
 1fa:	d9 2e       	mov	r13, r25
 1fc:	80 e6       	ldi	r24, 0x60	; 96
 1fe:	e8 2e       	mov	r14, r24
 200:	8a ee       	ldi	r24, 0xEA	; 234
 202:	f8 2e       	mov	r15, r24
//Blink(state);


while(1){
//SEND SIGNAL IF SOMEONE IS HERE//////////////////////
	if(state==1){
 204:	80 91 60 00 	lds	r24, 0x0060
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	e1 f4       	brne	.+56     	; 0x244 <main+0xa6>
		if(sine_enable>0){
 20c:	80 91 62 00 	lds	r24, 0x0062
 210:	88 23       	and	r24, r24
 212:	29 f0       	breq	.+10     	; 0x21e <main+0x80>
			sine_enable--;
 214:	80 91 62 00 	lds	r24, 0x0062
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	80 93 62 00 	sts	0x0062, r24
		}
		IRon();
 21e:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 220:	8b 2d       	mov	r24, r11
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x84>
		_delay_us(10);
		IRoff();
 226:	c2 98       	cbi	0x18, 2	; 24
 228:	88 ee       	ldi	r24, 0xE8	; 232
 22a:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22c:	f8 01       	movw	r30, r16
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 234:	d9 f7       	brne	.-10     	; 0x22c <main+0x8e>
		_delay_ms(100);
		if(sine_enable>5){
 236:	80 91 62 00 	lds	r24, 0x0062
 23a:	86 30       	cpi	r24, 0x06	; 6
 23c:	10 f0       	brcs	.+4      	; 0x242 <main+0xa4>
			ledon();
 23e:	c3 9a       	sbi	0x18, 3	; 24
 240:	01 c0       	rjmp	.+2      	; 0x244 <main+0xa6>
			//sine_enable=0;
		}
		else{
			ledoff();
 242:	c3 98       	cbi	0x18, 3	; 24
		}
	}

//MUTE IF NOBODY IS HERE//////////////////////////////
	if(state==2){
 244:	80 91 60 00 	lds	r24, 0x0060
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	51 f5       	brne	.+84     	; 0x2a0 <main+0x102>
		if(sine_enable>0){
 24c:	80 91 62 00 	lds	r24, 0x0062
 250:	88 23       	and	r24, r24
 252:	29 f0       	breq	.+10     	; 0x25e <main+0xc0>
			sine_enable--;
 254:	80 91 62 00 	lds	r24, 0x0062
 258:	81 50       	subi	r24, 0x01	; 1
 25a:	80 93 62 00 	sts	0x0062, r24
		}
		IRon();
 25e:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 260:	8b 2d       	mov	r24, r11
 262:	8a 95       	dec	r24
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0xc4>
		_delay_us(10);
		IRoff();
 266:	c2 98       	cbi	0x18, 2	; 24
 268:	88 ee       	ldi	r24, 0xE8	; 232
 26a:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 26c:	f8 01       	movw	r30, r16
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 272:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 274:	d9 f7       	brne	.-10     	; 0x26c <main+0xce>
		_delay_ms(100);
		if(sine_enable>5){
 276:	80 91 62 00 	lds	r24, 0x0062
 27a:	86 30       	cpi	r24, 0x06	; 6
 27c:	60 f0       	brcs	.+24     	; 0x296 <main+0xf8>
	DDRB|= 2;
	PORTB|=2;
}

void Mute_off(void){
	muted=0;
 27e:	10 92 64 00 	sts	0x0064, r1
	/**/
	PORTB&=!2;
 282:	88 b3       	in	r24, 0x18	; 24
 284:	18 ba       	out	0x18, r1	; 24
 286:	ce 01       	movw	r24, r28
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0xea>
	_delay_ms(1);
	/**/
	PORTB&=!2;
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	18 ba       	out	0x18, r1	; 24
	DDRB= 8 |4|1;
 290:	d7 ba       	out	0x17, r13	; 23
		_delay_us(10);
		IRoff();
		_delay_ms(100);
		if(sine_enable>5){
			Mute_off();
			ledon();
 292:	c3 9a       	sbi	0x18, 3	; 24
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <main+0x102>


}*/

void Mute_on(void){
	muted=1;
 296:	c0 92 64 00 	sts	0x0064, r12
	DDRB|= 2;
 29a:	b9 9a       	sbi	0x17, 1	; 23
	PORTB|=2;
 29c:	c1 9a       	sbi	0x18, 1	; 24
			ledon();
			//sine_enable=0;
		}
		else{
			Mute_on();
			ledoff();
 29e:	c3 98       	cbi	0x18, 3	; 24
		}
	}


//DO NOTHING /////////////////////////////////////////
	if(state==3){
 2a0:	80 91 60 00 	lds	r24, 0x0060
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <main+0x126>
		ledoff();
 2a8:	c3 98       	cbi	0x18, 3	; 24
	DDRB|= 2;
	PORTB|=2;
}

void Mute_off(void){
	muted=0;
 2aa:	10 92 64 00 	sts	0x0064, r1
	/**/
	PORTB&=!2;
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	18 ba       	out	0x18, r1	; 24
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x116>
	_delay_ms(1);
	/**/
	PORTB&=!2;
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	18 ba       	out	0x18, r1	; 24
	DDRB= 8 |4|1;
 2bc:	d7 ba       	out	0x17, r13	; 23
 2be:	c7 01       	movw	r24, r14
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x122>



/*  STATE CHANGE */

if(muted ==0){
 2c4:	80 91 64 00 	lds	r24, 0x0064
 2c8:	88 23       	and	r24, r24
 2ca:	09 f0       	breq	.+2      	; 0x2ce <main+0x130>
 2cc:	9b cf       	rjmp	.-202    	; 0x204 <main+0x66>
	if(PINB & 2){
 2ce:	b1 9b       	sbis	0x16, 1	; 22
 2d0:	99 cf       	rjmp	.-206    	; 0x204 <main+0x66>
		state++;
 2d2:	80 91 60 00 	lds	r24, 0x0060
 2d6:	8f 5f       	subi	r24, 0xFF	; 255
 2d8:	80 93 60 00 	sts	0x0060, r24
		if(state >3) state =1;
 2dc:	80 91 60 00 	lds	r24, 0x0060
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	10 f0       	brcs	.+4      	; 0x2e8 <main+0x14a>
 2e4:	c0 92 60 00 	sts	0x0060, r12
		Blink (state);
 2e8:	80 91 60 00 	lds	r24, 0x0060
 2ec:	06 df       	rcall	.-500    	; 0xfa <Blink>
		Set_state(state);
 2ee:	60 91 60 00 	lds	r22, 0x0060
	uint8_t  byteRead = eeprom_read_byte((uint8_t*)1); 
	return byteRead;
}

void Set_state(uint8_t data){
	eeprom_write_byte ((uint8_t*) 1, data); 
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	09 d0       	rcall	.+18     	; 0x30a <__eewr_byte_tn13a>
 2f8:	85 cf       	rjmp	.-246    	; 0x204 <main+0x66>

000002fa <__eerd_byte_tn13a>:
 2fa:	e1 99       	sbic	0x1c, 1	; 28
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <__eerd_byte_tn13a>
 2fe:	1f ba       	out	0x1f, r1	; 31
 300:	8e bb       	out	0x1e, r24	; 30
 302:	e0 9a       	sbi	0x1c, 0	; 28
 304:	99 27       	eor	r25, r25
 306:	8d b3       	in	r24, 0x1d	; 29
 308:	08 95       	ret

0000030a <__eewr_byte_tn13a>:
 30a:	26 2f       	mov	r18, r22

0000030c <__eewr_r18_tn13a>:
 30c:	e1 99       	sbic	0x1c, 1	; 28
 30e:	fe cf       	rjmp	.-4      	; 0x30c <__eewr_r18_tn13a>
 310:	1c ba       	out	0x1c, r1	; 28
 312:	1f ba       	out	0x1f, r1	; 31
 314:	8e bb       	out	0x1e, r24	; 30
 316:	2d bb       	out	0x1d, r18	; 29
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	e2 9a       	sbi	0x1c, 2	; 28
 31e:	e1 9a       	sbi	0x1c, 1	; 28
 320:	0f be       	out	0x3f, r0	; 63
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
